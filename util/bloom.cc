// Copyright (c) 2012 The LevelDB Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file. See the AUTHORS file for names of contributors.
// 对于节约空间的BloomFilter是非常适合leveldb的，leveldb针对key的很多设计都是尽量减少多余的空间占用。
#include "leveldb/filter_policy.h"

#include "leveldb/slice.h"
#include "util/hash.h"

namespace leveldb {

namespace {
static uint32_t BloomHash(const Slice& key) {
  return Hash(key.data(), key.size(), 0xbc9f1d34);
}

class BloomFilterPolicy : public FilterPolicy {
 public:
  explicit BloomFilterPolicy(int bits_per_key) : bits_per_key_(bits_per_key) {
    // We intentionally round down to reduce probing cost a little bit
    // //计算哈希函数个数，控制在1~30个范围。
    k_ = static_cast<size_t>(bits_per_key * 0.69);  // 0.69 =~ ln(2)
    if (k_ < 1) k_ = 1;
    if (k_ > 30) k_ = 30;
  }

  const char* Name() const override { return "leveldb.BuiltinBloomFilter2"; }

  //创建一个BloomFilter数据。传入的值：
  //1、keys: key列表；
  //2、n: key的个数；
  //3、dst: 用于存放BloomFilter的数据地址
  void CreateFilter(const Slice* keys, int n, std::string* dst) const override {
    // Compute bloom filter size (in both bits and bytes)
    // 计算出总的需要的bits个数
    size_t bits = n * bits_per_key_;

    // For small n, we can see a very high false positive rate.  Fix it
    // by enforcing a minimum bloom filter length.
    // bits太小的话会导致很高的查询错误率，
   //这里强制bits个数不能小于64
    if (bits < 64) bits = 64;

    // 向上按8bit，一个Byte对齐
    size_t bytes = (bits + 7) / 8;
    bits = bytes * 8;
    // 扩展下要存储BloomFilter的内存空间，
	  // 并在尾部一个Byte存哈希函数的个数。
    const size_t init_size = dst->size();
    // 每次会加自己的长度到原来的长度上。
    dst->resize(init_size + bytes, 0);
    dst->push_back(static_cast<char>(k_));  // Remember # of probes in filter
    // 接下来开始存储每个key值。
    char* array = &(*dst)[init_size];
    for (int i = 0; i < n; i++) {
      // Use double-hashing to generate a sequence of hash values.
      // See analysis in [Kirsch,Mitzenmacher 2006].


      //BloomFilter理论是通过多个hash计算来减少冲突，
	  //但leveldb实际上并未真正去计算多个hash，而是通过
	  //double-hashing的方式来达到同样的效果。
	  //double-hashing的理论如下：
	  // h(i,k) = (h1(k) + i*h2(k)) % T.size
	  // h1(k) = h, h2(k) = delta, h(i,k) = bitpos
      //1、计算hash值；
	  //2、hash值的高15位，低17位对调
	  //3、按k_个数来存储当前hash值。
      //3-1、计算存储位置；
      //3-2、按bit存；
      //3-3、累加hash值用于下次计算
      // Use double-hashing to generate a sequence of hash values.
      // See analysis in [Kirsch,Mitzenmacher 2006].
      uint32_t h = BloomHash(keys[i]);
      const uint32_t delta = (h >> 17) | (h << 15);  // Rotate right 17 bits
      for (size_t j = 0; j < k_; j++) {
        const uint32_t bitpos = h % bits;
        array[bitpos / 8] |= (1 << (bitpos % 8));
        h += delta;
      }
    }
  }
  //值的匹配就是插入的逆过程了。
  bool KeyMayMatch(const Slice& key, const Slice& bloom_filter) const override {
    //1、插入时按1Byte对齐；
	  //2、尾部插入了一个Byte的hash个数
    //所以大小不能小于2个字节，这样理解不知对否
    const size_t len = bloom_filter.size();
    if (len < 2) return false;

    const char* array = bloom_filter.data();
    const size_t bits = (len - 1) * 8;

    // Use the encoded k so that we can read filters generated by
    // bloom filters created using different parameters.
    const size_t k = array[len - 1];
    if (k > 30) {
      // Reserved for potentially new encodings for short bloom filters.
      // Consider it a match.
      return true;
    }
  //1、计算查询key对应的hash值
	//2、按插入规则去 &，只要有1bit不相同，那就不存在。
    uint32_t h = BloomHash(key);
    const uint32_t delta = (h >> 17) | (h << 15);  // Rotate right 17 bits
    for (size_t j = 0; j < k; j++) {
      const uint32_t bitpos = h % bits;
      if ((array[bitpos / 8] & (1 << (bitpos % 8))) == 0) return false;
      h += delta;
    }
    return true;
  }

 private:
  //每个key需要多少bit来存储表示
  size_t bits_per_key_;
  //hash函数的个数
  size_t k_;
};
}  // namespace
// Return a new filter policy that uses a bloom filter with approximately
// the specified number of bits per key.  A good value for bits_per_key
// is 10, which yields a filter with ~ 1% false positive rate.
//
// Callers must delete the result after any database that is using the
// result has been closed.
//
// Note: if you are using a custom comparator that ignores some parts
// of the keys being compared, you must not use NewBloomFilterPolicy()
// and must provide your own FilterPolicy that also ignores the
// corresponding parts of the keys.  For example, if the comparator
// ignores trailing spaces, it would be incorrect to use a
// FilterPolicy (like NewBloomFilterPolicy) that does not ignore
// trailing spaces in keys.
//leveldb的建议设定是bits_per_key = 10，就可以将查询错误率控制在1%了。
// 当然，用户是可以指定过滤器的，也可以指定BloomFilter的bits_per_key。但是leveldb一般还是建议使用BloomFilter，
// 且bits_per_key = 10就可以了。

const FilterPolicy* NewBloomFilterPolicy(int bits_per_key) {
  return new BloomFilterPolicy(bits_per_key);
}

}  // namespace leveldb
